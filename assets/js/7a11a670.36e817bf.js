"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[992],{8232:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=n(5893),o=n(1151);const r={sidebar_position:2},s="Configuration files setup",a={id:"ChromOptimise/Configuration-Files-Setup",title:"Configuration files setup",description:"You will need to create three configuration files for this pipeline to work:",source:"@site/docs/ChromOptimise/Configuration-Files-Setup.md",sourceDirName:"ChromOptimise",slug:"/ChromOptimise/Configuration-Files-Setup",permalink:"/ChromOptimise/ChromOptimise/Configuration-Files-Setup",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"ChromHMM overview",permalink:"/ChromOptimise/ChromOptimise/ChromHMM-overview"},next:{title:"Pipeline explanation",permalink:"/ChromOptimise/ChromOptimise/Pipeline-Explanation"}},l={},d=[{value:"Data directory structure",id:"data-directory-structure",level:2},{value:"FilePaths.txt",id:"filepathstxt",level:2},{value:"config.R",id:"configr",level:2},{value:"LogFileManagement.sh",id:"logfilemanagementsh",level:2}];function _(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"configuration-files-setup",children:"Configuration files setup"}),"\n",(0,i.jsx)(t.p,{children:"You will need to create three configuration files for this pipeline to work:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"FilePaths.txt"}),"\n",(0,i.jsx)(t.li,{children:"config.R"}),"\n",(0,i.jsx)(t.li,{children:"LogFileManagement.sh."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"These files are used by each of the R and bash scripts to aid in organisation of the scripts and avoid repetition."}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsx)(t.p,{children:"The scripts in this pipeline do not create the directory structure themselves. This is to avoid large files being dumped in unwanted locations. Please check your file paths are correct and then run Create_File_Structure.sh."})}),"\n",(0,i.jsx)(t.admonition,{title:"EOL errors",type:"warning",children:(0,i.jsx)(t.p,{children:"You must ensure that these files are written with EOL: \\n (LF) and not EOL: \\r\\n (CRLF)."})}),"\n",(0,i.jsxs)(t.p,{children:["After one creates each of these configuration files, place them in the 'configuration' directory. Then run the ",(0,i.jsx)(t.code,{children:"setup"})," executable from the main directory."]}),"\n",(0,i.jsx)(t.p,{children:"Note: The pipeline was completed with blueprint data in mind, if your data is already downloaded, processed, binarized etc. then the associated lines in the config files might not be required."}),"\n",(0,i.jsx)(t.h2,{id:"data-directory-structure",children:"Data directory structure"}),"\n",(0,i.jsx)(t.p,{children:"A guide for the structure of the data directory is given below (You only need to create the directories starting with an integer):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:"Main_Data_Directory\n\u251c\u2500\u2500 0_Downloaded_Files\n\u251c\u2500\u2500 1_Organised_Raw_Bam_Files\n\u2502   \u251c\u2500\u2500 Epigenetic_Mark_1\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 Epigenetic_Mark_n\n\u251c\u2500\u2500 2_Processed_Bam_Files\n\u2502   \u251c\u2500\u2500 Epigenetic_Mark_1\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 Epigenetic_Mark_n\n\u251c\u2500\u2500 3_Subsampled_Bam_Files\n\u251c\u2500\u2500 4_Binary_Files\n\u2502   \u251c\u2500\u2500 BinSize_xxx_SampleSize_yyy\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 BinSize_zzz_SampleSize_www\n\u251c\u2500\u2500 5_Model_Files\n\u251c\u2500\u2500 6_Optimum_Number_Of_States\n\u2502   \u251c\u2500\u2500 Results_From_Run_1\n\u2502   \u251c\u2500\u2500 Results_From_Run_2\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 Results_From_Run_n\n\u2502   \u2514\u2500\u2500 Likelihood_Values_Of_Models\n\u251c\u2500\u2500 7_Big_Model_Files\n\u2502   \u2514\u2500\u2500 Plots\n\u2502       \u251c\u2500\u2500 Euclidean_Distance_Histrograms\n\u2502       \u2514\u2500\u2500 Transition_Maxima_Scatter_Plots\n\u2514\u2500\u2500 8_Model_Comparison_Files\n"})}),"\n",(0,i.jsx)(t.h2,{id:"filepathstxt",children:"FilePaths.txt"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:'## Data directories\n\nexport MAIN_DIR="full/path/to/main/directory"\nexport DOWNLOAD_DIR="${MAIN_DIR}/path/to/downloads"\nexport RAW_DIR="${MAIN_DIR}/path/to/raw/data"\nexport PROCESSED_DIR="${MAIN_DIR}/path/to/processed/data"\nexport SUBSAMPLED_DIR="${MAIN_DIR}/path/to/subsampled/data"\nexport BINARY_DIR="${MAIN_DIR}/path/to/binary/data"\nexport MODEL_DIR="${MAIN_DIR}/path/to/chromHMM/models"\nexport OPTIMUM_STATES_DIR="${MAIN_DIR}/path/to/optimum/states/output"\nexport COMPARE_DIR="${MAIN_DIR}/path/to/comparison/files"\nexport BIG_MODELS_DIR="${MAIN_DIR}/path/to/big/models"\n\n## Script directories\n\nexport SCRIPTS_DIR="full/path/to/this/repository"\nexport RSCRIPTS_DIR="${SCRIPTS_DIR}/Rscripts"\nexport SUPPLEMENTARY_DIR="${SCRIPTS_DIR}/supplementary"\nexport LOG_DIR="${SCRIPTS_DIR}/LogFiles"\n\n## ChromHMM file locations\n\nexport CHROMHMM_MAIN_DIR="/path/to/ChromHMM/main/directory"\nexport CHROMHMM_CHROM_SIZES="${CHROMHMM_MAIN_DIR}/path/to/chromosome/sizes"\n'})}),"\n",(0,i.jsx)(t.h2,{id:"configr",children:"config.R"}),"\n",(0,i.jsxs)(t.p,{children:["To get a good value for the thresholds in the redundancy parameters section, please consult the ",(0,i.jsx)(t.a,{href:"/ChromOptimise/ChromOptimise/Supplementary-pipeline-explanation",children:"supplementary pipeline"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-R",children:'## Data Directories\n\nmain_dir="path/to/main/directory"\nmodel_dir=paste0(main_dir, "path/to/model/files")\noptimum_states_dir=paste0(main_dir, "path/to/optimum/states/output")\nlikelihood_dir=paste0(optimum_states_dir, "Likelihood_Values")\ncompare_dir=paste0(main_dir, "path/to/comparison/files")\nbig_models_dir=paste0(main_dir,"path/to/big/model/files")\n\n## Plotting directories\n\ntransition_plotting_dir=paste0(big_models_dir,"/path/to/plots")\nemission_plotting_dir=paste0(big_models_dir,"/path/to/plots")\n\n## Redundancy parameters\n\nemissions_threshold=VALUE\ntransitions_threshold=VALUE\nisolation_threshold=VALUE\n\n## Number of marks used in analysis\n\nnumber_of_marks=VALUE\n'})}),"\n",(0,i.jsx)(t.h2,{id:"logfilemanagementsh",children:"LogFileManagement.sh"}),"\n",(0,i.jsxs)(t.p,{children:["This file is essential for managing the temporary log files that are produced when sending the jobs through SLURM workload manager. On top of this, the script will produce information on the time for the script to complete.\n",(0,i.jsx)(t.br,{}),"\n","(Alternatively you can use the ",(0,i.jsx)(t.code,{children:"time"})," command with the scripts, this is not available on our HPC)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:'#!/bin/bash\n## ============= ##\n##   JOB START   ##\n## ============= ##\n\necho "Job \'${SLURM_JOB_NAME}\' started at:"\ndate -u\n\nstart_time=$(date +%s)\n\nLOG_FILE_PATH="${LOG_DIR}/$SLURM_JOB_NAME/$USER"\nmkdir -p "${LOG_FILE_PATH}"\ntimestamp=$(date -u +%Y.%m.%d-%H_%M)\nexport timestamp\n\n## ============= ##\n##   FUNCTIONS   ##\n## ============= ##\n\n## ====== FUNCTION : finishing_statement() ===========================================\n## Description: Delete temporary log and error files, give finishing message then exit\n## Globals: \n##     SLURM_SUBMIT_DIR\n##     SLURM_JOB_ID\n##     start_time\n## Locals:\n##     end_time\n##     time_taken\n## Arguments:\n##     exit code\n## ===================================================================================\nfinishing_statement(){\n    rm "${SLURM_SUBMIT_DIR}/temp${SLURM_JOB_ID}.log" \n    rm "${SLURM_SUBMIT_DIR}/temp${SLURM_JOB_ID}.err"\n    echo "Job finished with exit code $1 at:"\n    date -u\n    local end_time\n    local time_taken\n    end_time=$(date +%s)\n    time_taken=$((end_time-start_time))\n    echo "Job took a total of: ${time_taken} seconds to finish."\n    exit "$1"\n}\n\n## ====== FUNCTION : batch_finishing_statement() ======================================\n## Description: Delete temporary log and error files, give finishing message then exit\n## Globals: \n##     SLURM_SUBMIT_DIR\n##     SLURM_ARRAY_JOB_ID\n##     SLURM_ARRAY_TASK_ID\n##     start_time\n## Locals:\n##     end_time\n##     time_taken\n## Arguments:\n##     exit code\n## ===================================================================================\nbatch_finishing_statement(){\n    rm "${SLURM_SUBMIT_DIR}/temp${SLURM_ARRAY_JOB_ID}_${SLURM_ARRAY_TASK_ID}.log" \n    rm "${SLURM_SUBMIT_DIR}/temp${SLURM_ARRAY_JOB_ID}_${SLURM_ARRAY_TASK_ID}.err"\n    echo "Job finished with exit code $1 at:"\n    date -u\n    local end_time\n    local time_taken\n    end_time=$(date +%s)\n    time_taken=$((end_time-start_time))\n    echo "Job took a total of: ${time_taken} seconds to finish."\n    exit "$1"\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(_,{...e})}):_(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>s});var i=n(7294);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);