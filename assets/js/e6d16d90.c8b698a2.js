"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4728],{8439:(t,e,s)=>{s.r(e),s.d(e,{assets:()=>h,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var n=s(5893),i=s(1151);const o={title:"ContiguousStateLengths",description:"The script used to determine the lengths of contiguous state assignments.",sidebar_position:5},a="Contiguous State Lengths",r={id:"ChromOptimise/Pipeline-Explanation/OptimalNumberOfStates/ContiguousStateLength",title:"ContiguousStateLengths",description:"The script used to determine the lengths of contiguous state assignments.",source:"@site/docs/ChromOptimise/Pipeline-Explanation/OptimalNumberOfStates/ContiguousStateLength.md",sourceDirName:"ChromOptimise/Pipeline-Explanation/OptimalNumberOfStates",slug:"/ChromOptimise/Pipeline-Explanation/OptimalNumberOfStates/ContiguousStateLength",permalink:"/ChromOptimise/ChromOptimise/Pipeline-Explanation/OptimalNumberOfStates/ContiguousStateLength",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"ContiguousStateLengths",description:"The script used to determine the lengths of contiguous state assignments.",sidebar_position:5},sidebar:"documentationSidebar",previous:{title:"IsolationScores",permalink:"/ChromOptimise/ChromOptimise/Pipeline-Explanation/OptimalNumberOfStates/IsolationScores"},next:{title:"CalculateBIC",permalink:"/ChromOptimise/ChromOptimise/Pipeline-Explanation/OptimalNumberOfStates/CalculateBIC"}},h={},l=[{value:"Extra thoughts",id:"extra-thoughts",level:2}];function u(t){const e={blockquote:"blockquote",h1:"h1",h2:"h2",p:"p",...(0,i.a)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"contiguous-state-lengths",children:"Contiguous State Lengths"}),"\n",(0,n.jsx)(e.p,{children:"This script attempts to answer a similar question to [./IsolationScores.md].\nAt a base level, this question is trying to answer:"}),"\n",(0,n.jsxs)(e.blockquote,{children:["\n",(0,n.jsx)(e.p,{children:"Is this state useful?"}),"\n"]}),"\n",(0,n.jsx)(e.p,{children:"It does this in a similar way to [./IsolationScores.md] by assessing whether or\nnot a state is 'isolated'. However it covers a certain edge case that cannot be\nhandled by [./IsolationScores.md]. One big problem with computing Isolation\nscores is that it doesn't handle the cases like:"}),"\n",(0,n.jsx)(e.p,{children:"-----x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x---------------"}),"\n",(0,n.jsx)(e.p,{children:'(where "x" is the state in question and "-" is any other state).'}),"\n",(0,n.jsx)(e.p,{children:'The above shows that state "x" is not very stable. There is never a contiguous\nassignment of the state of more than one bin. However, The isolation score\nof this state (if this was the only manner in which it was assigned to the\ngenome by ChromHMM) would be 1 (relatively low).'}),"\n",(0,n.jsx)(e.p,{children:"To cover for this edge case (and a few others that look very similar). This\nscript was implemented. All the script does is look for a state assignment and\nthen report how many states downstream of it have the same assignment (until\nthis is no longer the case). If a state is likely to have a very low value\n(below a user defined threshold) for this metric (over the whole genome), then\nthe state is flagged as potentially redundant."}),"\n",(0,n.jsx)(e.p,{children:"The metric used for 'most likely' is a difficult one here however. After\nlooking at the distributions of contiguous state lengths it is obvious that\nthere is a significant positive skew in the distribution. Due to this skew,\nthe mean is out of the window. It is also quite clear that ChromHMM is\ngenerally quite unstable as the mode of the distribution (across all states\nover lots of different models) is 1 (or very close to 1). As such, we decided\nthat using the median was the best choice (to get around these shortcomings)."}),"\n",(0,n.jsx)(e.h2,{id:"extra-thoughts",children:"Extra thoughts"}),"\n",(0,n.jsx)(e.p,{children:"Now you could argue that such a state isn't necessarily redundant. Such a state\npattern as shown above can certainly be relevant. The reason we remove this\ncase is because it isn't very interpretable in a biological context. How can\nyou actually show that such a state exists across datasets and is functionally\nrelevant when its structure is so 'fragile'? Maybe in the future, when\nsequencing has advanced even further, it could be interpretable. But not right\nnow (2024)."})]})}function c(t={}){const{wrapper:e}={...(0,i.a)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(u,{...t})}):u(t)}},1151:(t,e,s)=>{s.d(e,{Z:()=>r,a:()=>a});var n=s(7294);const i={},o=n.createContext(i);function a(t){const e=n.useContext(o);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:a(t.components),n.createElement(o.Provider,{value:e},t.children)}}}]);